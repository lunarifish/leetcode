// 2024-4-18
// Runtime 76ms(8.9%)
// Memory 104.5mb(99.8%)

constexpr bool isPrime(size_t n) noexcept {
    if (n <= 1) return false;
    for (size_t i = 2; i*i <= n; i++) 
        if (n % i == 0) return false;
    return true;
}

template <int N>
struct prime_lut {
    constexpr prime_lut() noexcept {
        for (int i = 0; i < N; ++i)
            arr[i] = isPrime(i);
    }
    int arr[N];
};

constexpr auto LUT = prime_lut<101>();

class Solution {
public:
    int maximumPrimeDifference(vector<int>& nums) {
        int last(-1), first(-1), i(0);
        for (; i < nums.size(); ++i) {
            if (::LUT.arr[nums[i]]) {
                first = i;
                break;
            }
        }
        if (first == -1) {
            return 0;
        }
        for (i = nums.size() - 1; i >= 0; --i) {
            if (::LUT.arr[nums[i]]) {
                last = i;
                break;
            }
        }
        return last - first;
    }
};